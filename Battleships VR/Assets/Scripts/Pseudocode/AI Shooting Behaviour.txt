Pseudocode for how I want the AI's shooting to work:

variables:

    - a list containing all of the possible squares
    - a dictionary with the previous moves and whether they hit or sunk
    - a list of positions in target mode called the target stack

Make a Decision:

    if the ai is in target mode and previous shot was a hit:
        for each of the positions surrounding the previous position (N,E,S,W):
            if the position is in the list of possible squares and isn't in the target stack:
                add the position to the end of the target stack
        call the Target method

    else if the ai is in target mode and the previous shot was a miss:
        call the Target method

    else:
        call the Hunt method

Target:

    if the target stack is not empty:
        shoot at the first position in the target stack (remove it from the possible squares and the target stack)
        if the shot was a hit and sunk:
            for each position in the target stack:
                remove the position from the possible squares
            clear the target stack and set the ai to hunt mode

Improved Target Mode:

    if the target stack is not empty:
        get the last two times that the ai hit from the previous guesses list
        if the difference between them is 1:
            for each of the items in the target stack:
                if the direction is east or west:
                    remove it from the target stack

        if the difference between them is the length of the matrix:
            for each of the items in the target stack:
                if the direction is north or south:
                    remove it from the target stack
        
Probability Density Function: (takes input of the length of the boat and a string of the direction to check)
    if the string is "Horizontal":
        the increment number "j" is 1
    if the string is "Vertical":
        the increment number "j" is the length of the matrix

    for each of the elements in position guesses:
        create temporary empty int array to store the boat positions to check
        for int i = position; i < position + length of the boat; i += j:
            add i to the temporary array
        boolean valid is true
        for each of the elements in the temporary array:
            if the element is not in the list of possible squares:
                valid is false
                break out of the loop
        if valid is true:
            for each of the elements in the temporary array:
                increment the weight for that element in the position guesses
    
    if the string is "Horizontal":
        call Probability Density Function with the boat length and the string "Vertical"



        


Hunt:

    clear the weight of the unchecked positions
    for each of the boats in the player's boat list:
        call the Probability Density Function with the length of the boat and the string "Horizontal"
    call the method to print out the weights

    choose a random element from the possible squares list and shoot at that position (remove it from the possible squares)
    if the position was a hit, set the ai to target mode